
@model List<appGabrielMontoya.Models.DatosGrafico>
@{
    ViewData["Title"] = "Gráfico Comparativo de Presupuesto y Ejecución";
}

<h2>@ViewData["Title"]</h2>

<div class="row">
    <div class="col-md-6">
        <form asp-action="GenerarGrafico" method="post">
            <div class="form-group">
                <label for="fechaInicio">Fecha Inicio:</label>
                <input type="date" class="form-control" id="fechaInicio" name="fechaInicio" required />
            </div>
            <div class="form-group">
                <label for="fechaFin">Fecha Fin:</label>
                <input type="date" class="form-control" id="fechaFin" name="fechaFin" required />
            </div>
            <button type="submit" class="btn btn-primary">Generar Gráfico</button>
        </form>
    </div>
</div>

@if (Model != null && Model.Any())
{
    <div class="row mt-4">
        <div class="col-md-12">
            <div class="chart-container" style="position: relative; height:400px; width:100%">
                <canvas id="graficoComparativo"></canvas>
            </div>
        </div>
    </div>

    <div class="row mt-4">
        <div class="col-md-12">
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Tipo de Gasto</th>
                        <th>Presupuestado</th>
                        <th>Ejecutado</th>
                        <th>Diferencia</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Model)
                    {
                        <tr>
                            <td>@item.TipoGasto</td>
                            <td>@item.Presupuestado.ToString("C")</td>
                            <td>@item.Ejecutado.ToString("C")</td>
                            <td style="color: @(item.Ejecutado > item.Presupuestado ? "red" : "green")">
                                @((item.Presupuestado - item.Ejecutado).ToString("C"))
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>

    @section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            var ctx = document.getElementById('graficoComparativo').getContext('2d');
            var tiposGasto = @Html.Raw(Json.Serialize(Model.Select(m => m.TipoGasto)));
            var presupuestado = @Html.Raw(Json.Serialize(Model.Select(m => m.Presupuestado)));
            var ejecutado = @Html.Raw(Json.Serialize(Model.Select(m => m.Ejecutado)));

            var chart = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: tiposGasto,
                    datasets: [
                        {
                            label: 'Presupuestado',
                            data: presupuestado,
                            backgroundColor: 'rgba(54, 162, 235, 0.5)',
                            borderColor: 'rgba(54, 162, 235, 1)',
                            borderWidth: 1
                        },
                        {
                            label: 'Ejecutado',
                            data: ejecutado,
                            backgroundColor: 'rgba(255, 99, 132, 0.5)',
                            borderColor: 'rgba(255, 99, 132, 1)',
                            borderWidth: 1
                        }
                    ]
                },
                options: {
                    responsive: true,
                    scales: {
                        y: {
                            beginAtZero: true,
                            ticks: {
                                callback: function (value) {
                                    return '$' + value.toLocaleString();
                                }
                            }
                        }
                    },
                    plugins: {
                        tooltip: {
                            callbacks: {
                                label: function (context) {
                                    return context.dataset.label + ': $' + context.raw.toLocaleString();
                                }
                            }
                        }
                    }
                }
            });
        });
    </script>
    }
}